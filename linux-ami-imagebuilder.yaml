AWSTemplateFormatVersion: '2010-09-09'
Description: |
  This template creates an EC2 AMI from a specified base AMI using EC2 Image Builder without any additional modifications.

Parameters:
  AWSRegion:
    Type: String
    Description: AWS region for the Image Builder resources
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC ID to use for Image Builder instance
  SubnetId:
    Type: String
    Description: Subnet ID in the VPC
  SSHKeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: EC2 KeyPair name for SSH access
  SSHLocation:
    Type: String
    Description: IP address range that can SSH to EC2 instances
    Default: 0.0.0.0/0
  BaseImageId:
    Type: String
    Description: AMI ID to use as the base image

Resources:
  ImageRecipe:
    Type: AWS::ImageBuilder::ImageRecipe
    Properties:
      Name: !Sub ${AWS::StackName}-ImageRecipe
      ParentImage: !Ref 'BaseImageId'
      Version: 1.0.0
      Components: []

  InfrastructureConfiguration:
    Type: AWS::ImageBuilder::InfrastructureConfiguration
    Properties:
      InstanceProfileName: !Ref 'InstanceProfile'
      InstanceTypes:
        - t4g.micro
      Name: !Sub ${AWS::StackName}-InfraConfig
      KeyPair: !Ref 'SSHKeyPairName'
      TerminateInstanceOnFailure: true
      SecurityGroupIds:
        - !GetAtt 'InstanceSecurityGroup.GroupId'
      SubnetId: !Ref 'SubnetId'

  Image:
    Type: AWS::ImageBuilder::Image
    Properties:
      ImageRecipeArn: !GetAtt 'ImageRecipe.Arn'
      InfrastructureConfigurationArn: !GetAtt 'InfrastructureConfiguration.Arn'
      EnhancedImageMetadataEnabled: true

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref 'VpcId'
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref 'SSHLocation'
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: 0
          ToPort: 65535
          CidrIp: !Ref 'SSHLocation'

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref 'EC2Role'

  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: !Sub 'ec2.${AWS::URLSuffix}'
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore'
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/EC2InstanceProfileForImageBuilder'

Outputs:
  ImageArn:
    Description: ARN of the created EC2 Image Builder image
    Value: !GetAtt 'Image.Arn'
  ImageId:
    Description: ID of the created EC2 Image Builder image
    Value: !GetAtt 'Image.ImageId'
